[CI/CD]
CI: 지속적 통합
CD: 지속적 제공/배포

<CI>
지속적 통합(CI)는 개발자를 위한 자동화 프로세스로,
개발자가 코드를 원격 저장소에 push하면(code 단계), 원격 저장소로부터 코드를 가져와 테스트 후 빌드하고(Build 단계),
코드 빌드 결과물이 다른 컴포넌트와 잘 통합되는지 확인하는 과정(Test 단계)으로 이루어 진다.

<CD>
지속적 서비스 제공 및 배포(CD)는 배포 가능한 소프트웨어 패키지를 작성하고(Release 단계),
서비스를 사용자에게 배포하고(Deploy 단계), 서비스 현황을 파악학고 문제를 감지(Operate 단계)로 이루어 진다.

<CI/CD 파이프라인>
: 배포 과정을 자동화 시키는 방법
개발자가 코드를 작성해서 원격 저장소에 올림
-> 그 코드가 빌드, 테스트, 릴리즈를 거쳐 배포 서버로 전달
-> 배포 서버에 도달한 빌드된 코드는 애플리케이션 서버로 최종 배포
-> 유저가 결과물 확인

파이프라인은 전체 배포 과정을 다음과 같은 단계로 나눔
1. Source 단계: 원격 저장소의 소스 코드에 변경 사항이 일어날 경우, 이를 감지하고 다음 단계로 전달
2. Build 단계: Source 단계에서 전달받은 코드를 컴파일, 빌드, 테스트하여 가겅. Build 단계를 거쳐 생성된 결과물을 다음 단계로 전달하는 작업을 수행.
3. Deploy 단계: Deploy 단계에서는 Build 단계로부터 전달받은 결과물을 실제 서비스에 반영하는 작업.


[무중단 배포]
:새로운 서비스를 릴리즈할 때 서버중단없이 배포하는 것

<Blue/Green 배포>
현재 운영중인 서비스를 Blue, 새롭게 배포할 환경을 Green이라 함.
Blue에서 서비스 가동 중일 때 Green에 새로운 버전을 배포하고, 배포가 완료되면 로드 밸런서가 Green으로 트래픽을 전환하고, Blue 서비스는 종료.

<Rolling 배포>
새로운 버전을 점진적으로 적용하는 방식
새로운 버전이 등록 되는 서버에서는 다운타임이 발생 할 수 있으므로 로드 밸런서가 일시적으로
트래픽을 보내지 않다가 배포가 완료된 후 다시 트래픽을 보내는 방식을 통해 새로운 버전을 배포 하는 전략

<Canary 배포>
이전 버전과 새로운 버전이 동시에 가동되는 방식으로, 새 버전의 인스턴스는 일부 사용자에게만 서비스되고 나머지 사용자는 기존 버전을 사용.

cf) Niginx를 이용한 무중단 배포
-> 로드 밸런싱을 통해 하나의 서버가 멈추더라도 서비스 중단없이 다른 서버가 서비스를 계속 유지할 수 있음!

[DNS]
브라우저가 인터넷 자원을 로드할 수 있도록 도메인 이름을 IP 주소로 변환

사용자가 웹브라우저에 ‘naver.com’ 입력
-> DNS 서버에 ‘naver.com’ 도메인 전달
-> DNS 서버가 도메인과 연결된 IP 주소를 사용자 PC에 전달
-> 사용자 PC는 전달받은 서버의 IP 주소로 접속
-> 브라우저에 서버 내용 출력

[bastion host]
: Public Subnet에 위치하며, Private Subnet에 위치한 EC2에 접근하기 위한 Proxy Server의 역할을 수행
: 외부에서 내부 네트워크에 접근할 수 있는 유일한 방법으로 보안 경계 역할 수행